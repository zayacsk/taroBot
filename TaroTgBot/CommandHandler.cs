using TaroTgBot.Core;
using TaroTgBot.Handlers;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Payments;
using Telegram.Bot.Types.ReplyMarkups;

public class CommandHandler
{
    private readonly ITelegramBotClient _botClient;
    private readonly Dictionary<long, string> _userInputs;
    private readonly TarotHandler _tarotHandler;
    private readonly NumerologyHandler _numerologyHandler;
    private readonly TaskQueue _taskQueue;
    private readonly FirebaseService _firebaseService;

    public CommandHandler(ITelegramBotClient botClient, Dictionary<long, string> userInputs, TaskQueue taskQueue, FirebaseService firebaseService)
    {
        _botClient = botClient;
        _userInputs = userInputs;
        _taskQueue = taskQueue;
        _firebaseService = firebaseService;
        _tarotHandler = new TarotHandler();
        _numerologyHandler = new NumerologyHandler();
    }

    public async Task HandleCommandAsync(Message message, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;
        
        if (_userInputs.TryGetValue(message.Chat.Id, out var state))
        {
            if (state == "awaiting_tarot_input" || state == "awaiting_numerology_input")
            {
                if (message.Text == "üîô –ù–∞–∑–∞–¥")
                {
                    await _firebaseService.AddOrUpdateUser(chatId.ToString(), message.Chat.Username ?? "Unknown",message.Contact?.PhoneNumber ?? "UnknownPhone", 1);
                    
                    // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    _userInputs.Remove(message.Chat.Id);
                    await SendMainMenuAsync(message.Chat.Id, cancellationToken);
                    return;
                }

                // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
                var removeKeyboard = new ReplyKeyboardRemove();

                await _botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å, –æ–Ω —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏. –°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç.‚ú®",
                    replyMarkup: removeKeyboard,
                    cancellationToken: cancellationToken
                );

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
                _taskQueue.Enqueue(async () =>
                {
                    if (state == "awaiting_tarot_input")
                    {
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¢–∞—Ä–æ
                        string gptResponse = await _tarotHandler.ProcessTarotRequest(message.Text); // –î–æ–±–∞–≤–ª—è–µ–º await

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        await _botClient.SendTextMessageAsync(
                            chatId: message.Chat.Id,
                            text: $"{gptResponse}",
                            cancellationToken: cancellationToken
                        );
                    }
                    else if (state == "awaiting_numerology_input")
                    {
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
                        string gptResponse = await _numerologyHandler.ProcessNumerologyRequest(message.Text); // –î–æ–±–∞–≤–ª—è–µ–º await

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        await _botClient.SendTextMessageAsync(
                            chatId: message.Chat.Id,
                            text: $"{gptResponse}",
                            cancellationToken: cancellationToken
                        );
                    }

                    // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    _userInputs.Remove(message.Chat.Id);
                    await SendMainMenuAsync(message.Chat.Id, cancellationToken);
                });
                return;
            }
        }

        switch (message.Text)
        {
            case "/start":
                var startBalance = await _firebaseService.GetUserBalance(chatId.ToString(), message.Chat.Username ?? "Unknown", message.Contact?.PhoneNumber);
                await SendMainMenuAsync(message.Chat.Id, cancellationToken);
                break;
            
            case "üí∞ –ë–∞–ª–∞–Ω—Å":
                var balance = await _firebaseService.GetUserBalance(chatId.ToString(), message.Chat.Username ?? "Unknown", message.Contact?.PhoneNumber);
                await _botClient.SendTextMessageAsync(chatId, $"üí∞ –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {balance} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤. –í–∞—à id —á–∞—Ç–∞: {chatId}", cancellationToken: cancellationToken);
                break;

            case "üí≥ –û–ø–ª–∞—Ç–∞":
                await _botClient.SendInvoiceAsync(chatId,
                    title: "–†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ",
                    description: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π.",
                    payload: "tarot_reading",
                    currency: "XTR",
                    prices: new[]
                    {
                        new Telegram.Bot.Types.Payments.LabeledPrice("–†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", 50)
                    },
                    photoUrl: "https://icon-icons.com/icons2/1286/PNG/128/36_85248.png",
                    cancellationToken: cancellationToken
                );
                break;
            
            case "üìÉ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞":
                await _botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–∏—à–∏—Ç–µ @TaroBotHelp."
                );
                break;

            case "üîÆ –¢–∞—Ä–æ":
                var tarotBalance = await _firebaseService.GetUserBalance(chatId.ToString(), message.Chat.Username ?? "Unknown", message.Contact?.PhoneNumber ?? "UnknownPhone");
                if (tarotBalance < 1)
                {
                    await _botClient.SendTextMessageAsync(
                        chatId: message.Chat.Id,
                        text: "üîî –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞. –û–¥–∏–Ω —Ä–∞—Å–∫–ª–∞–¥ —Å—Ç–æ–∏—Ç 100 –∑–≤–µ–∑–¥. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é —Å–¥–µ–ª–∞—é –≤–∞–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!üîÆ‚ú®",
                        cancellationToken: cancellationToken
                    );
                    return;
                }

                // –°–ø–∏—Å—ã–≤–∞–µ–º 1 —Å –±–∞–ª–∞–Ω—Å–∞
                await _firebaseService.AddOrUpdateUser(chatId.ToString(), message.Chat.Username ?? "Unknown", message.Contact?.PhoneNumber ?? "UnknownPhone", -1);
                _userInputs[message.Chat.Id] = "awaiting_tarot_input";

                var tarotBackButtonKeyboard = new ReplyKeyboardMarkup(new[]
                {
                    new[] { new KeyboardButton("üîô –ù–∞–∑–∞–¥") }
                })
                {
                    ResizeKeyboard = true,
                    OneTimeKeyboard = true
                };

                await _botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "üîÆ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –≤–æ–ª–Ω—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª—é–±–æ–≤—å –∏–ª–∏ –∫–∞—Ä—å–µ—Ä–∞). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å–∫–ª–∞–¥–∞! \n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 5 - 30 –º–∏–Ω—É—Ç",
                    replyMarkup: tarotBackButtonKeyboard,
                    cancellationToken: cancellationToken
                );
                break;

            case "üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è":
                var numerologyBalance = await _firebaseService.GetUserBalance(chatId.ToString(), message.Chat.Username ?? "Unknown", message.Contact?.PhoneNumber ?? "UnknownPhone");
                if (numerologyBalance < 1)
                {
                    await _botClient.SendTextMessageAsync(
                        chatId: message.Chat.Id,
                        text: "üîî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏. –û–¥–∏–Ω —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏—Ç 100 –∑–≤–µ–∑–¥. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —á–∏—Å–ª–∞! üî¢‚ú®",
                        cancellationToken: cancellationToken
                    );
                    return;
                }

                // –°–ø–∏—Å—ã–≤–∞–µ–º 1 —Å –±–∞–ª–∞–Ω—Å–∞
                await _firebaseService.AddOrUpdateUser(chatId.ToString(), message.Chat.Username ?? "Unknown", message.Contact?.PhoneNumber ?? "UnknownPhone", -1);
                _userInputs[message.Chat.Id] = "awaiting_numerology_input";

                var numerologyBackButtonKeyboard = new ReplyKeyboardMarkup(new[]
                {
                    new[] { new KeyboardButton("üîô –ù–∞–∑–∞–¥") }
                })
                {
                    ResizeKeyboard = true,
                    OneTimeKeyboard = true
                };

                await _botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "üî¢ –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–∞—Ä—å–µ—Ä—É), –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç —á–∏—Å–ª–∞! \n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 5 - 30 –º–∏–Ω—É—Ç",
                    replyMarkup: numerologyBackButtonKeyboard,
                    cancellationToken: cancellationToken
                );
                break;

            default:
                await _botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
                    cancellationToken: cancellationToken
                );
                break;
        }
    }

    private async Task SendMainMenuAsync(long chatId, CancellationToken cancellationToken)
    {
        var mainMenuKeyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] { new KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞"), new KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å") },
            new[] { new KeyboardButton("üîÆ –¢–∞—Ä–æ"), new KeyboardButton("üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è") },
            new[] { new KeyboardButton("üìÉ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") }
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = true
        };

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: $"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! \n–Ø –ø–æ–º–æ–≥—É –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Ç–∞–π–Ω—ã —Å—É–¥—å–±—ã –∏ —á–∏—Å–µ–ª. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ: \nüîÆ –¢–∞—Ä–æ ‚Äî –ø–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏ —Ä–∞–∑–±–µ—Ä–∏—Å—å –≤ —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö, –ø–ª–∞–Ω–∞—Ö –∏ —Å—É–¥—å–±–æ–Ω–æ—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö. \nüî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è ‚Äî —É–∑–Ω–∞–π, —á—Ç–æ —Å–∫—Ä—ã–≤–∞—é—Ç —Ç–≤–æ–∏ —á–∏—Å–ª–∞, –∏ —Ä–∞—Å–∫—Ä–æ–π –≥–ª—É–±–∏–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Å–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –±—É–¥—É—â–µ–≥–æ. \nüí∞ –ë–∞–ª–∞–Ω—Å ‚Äî –ø—Ä–æ–≤–µ—Ä—å, —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤. \nüí≥ –û–ø–ª–∞—Ç–∞ ‚Äî –ø–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–∫—Ä–æ–π –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. \nüìÉ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, —è –ø–æ–¥—Å–∫–∞–∂—É, –∫—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è. \n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 5 - 30 –º–∏–Ω—É—Ç \n–í–∞—à id {chatId}",
            replyMarkup: mainMenuKeyboard,
            cancellationToken: cancellationToken
        );
    }
    
    public async Task ProcessPreCheckoutQueryAsync(PreCheckoutQuery preCheckoutQuery, CancellationToken cancellationToken)
    {
        if (preCheckoutQuery.InvoicePayload == "tarot_reading")
        {
            await _botClient.AnswerPreCheckoutQueryAsync(preCheckoutQuery.Id, cancellationToken: cancellationToken);
        }
        else
        {
            await _botClient.AnswerPreCheckoutQueryAsync(preCheckoutQuery.Id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑.", cancellationToken: cancellationToken);
        }
    }

    public async Task ProcessSuccessfulPaymentAsync(Message message, CancellationToken cancellationToken)
    {
        var chatId = message.Chat.Id;
        var successfulPayment = message.SuccessfulPayment;

        Console.WriteLine($"[INFO] Successful payment received. Payload: {successfulPayment?.InvoicePayload}, Amount: {successfulPayment?.TotalAmount}");

        if (successfulPayment?.InvoicePayload == "tarot_reading")
        {
            await _firebaseService.AddOrUpdateUser(chatId.ToString(), message.Chat.Username ?? "Unknown", message.Contact?.PhoneNumber ?? "UnknownPhone", 1);
            await _botClient.SendTextMessageAsync(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω, –∏ —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ —Ç–∞–π–Ω—ã –¢–∞—Ä–æ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∏—é —á–∏—Å–µ–ª ‚Äì –≤—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ –≤–∞–º –±–ª–∏–∂–µ!üîÆ", cancellationToken: cancellationToken);
        }
        else
        {
            Console.WriteLine($"[ERROR] Payment payload mismatch: {successfulPayment?.InvoicePayload}");
        }
    }
}